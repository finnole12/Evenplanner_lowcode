/**
 * Code is auto-generated by Application Logic, DO NOT EDIT.
 * @version(2.0)
 */
const LCAPApplicationService = require('@sap/low-code-event-handler');
const crypto = require('crypto');
const before_Events_Create = require('./code/before-events-create');
const before_Users_Create_Update = require('./code/before-users-create-update');
const after_Surveys_Read = require('./code/after-surveys-read');
const before_Questions_Create_Update = require('./code/before-questions-create-update');
const before_Answers_Create = require('./code/before-answers-create');
const on_Processpayment_Processpayment = require('./code/on-processpayment-processpayment');
const on_Sendmessage_Sendmessage = require('./code/on-sendmessage-sendmessage');

class low_code_attempt_6Srv extends LCAPApplicationService {
    async init() {

        this.before('CREATE', 'Events', async (request) => {
            await before_Events_Create(request);
        });

        this.before(['CREATE', 'UPDATE'], 'Users', async (request) => {
            await before_Users_Create_Update(request);
        });

        this.after('READ', 'Surveys', async (results, request) => {
            await after_Surveys_Read(results, request);
        });

        this.before(['CREATE', 'UPDATE'], 'Questions', async (request) => {
            await before_Questions_Create_Update(request);
        });

        this.before('CREATE', 'Answers', async (request) => {
            await before_Answers_Create(request);
        });

        this.on('processPayment', async (request) => {
            return on_Processpayment_Processpayment(request);
        });

        this.on('sendMessage', async (request) => {
            return on_Sendmessage_Sendmessage(request, next);
        });

        this.on('getCurrentUserId', async (request) => {
            return { id: request.user.id };
        });

        this.on('addMessage', async (request) => {
            const { eventId, messageText } = request.data;
            if (!eventId || !messageText) {
                return { success: false };
            }

            const { EventMessages } = cds.entities;
            const newId = crypto.randomUUID();
            await INSERT.into(EventMessages).columns('ID', 'text', 'event_ID').values(newId, messageText, eventId);

            return { success: true };
        });

        return super.init();
    }
}

module.exports = {
    low_code_attempt_6Srv
};